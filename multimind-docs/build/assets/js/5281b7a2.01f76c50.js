"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[443],{5874:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>g,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"architecture","title":"Architecture","description":"MultiMind SDK is designed with modularity and extensibility in mind. The architecture enables seamless integration of models, agents, RAG, and orchestration workflows.","source":"@site/docs/architecture.md","sourceDirName":".","slug":"/architecture","permalink":"/docs/architecture","draft":false,"unlisted":false,"editUrl":"https://github.com/multimind-dev/multimind-sdk/edit/develop/docs/architecture.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Getting Started","permalink":"/docs/getting-started"},"next":{"title":"Integration Guide","permalink":"/docs/integration-guide"}}');var r=t(4848),s=t(8453);const o={},a="Architecture",l={},c=[{value:"Core Components",id:"core-components",level:2},{value:"Flow Diagram",id:"flow-diagram",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"architecture",children:"Architecture"})}),"\n",(0,r.jsx)(n.p,{children:"MultiMind SDK is designed with modularity and extensibility in mind. The architecture enables seamless integration of models, agents, RAG, and orchestration workflows."}),"\n",(0,r.jsx)(n.h2,{id:"core-components",children:"Core Components"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Pipeline:"})," Orchestrates model workflows, agent logic, and RAG operations."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Modules:"})," Model wrappers, agent system, RAG engine, CLI, logging, and integrations."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Utils:"})," Configuration management, environment loading, and utility functions."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"flow-diagram",children:"Flow Diagram"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-mermaid",children:"graph TD\n    CLI[CLI] --\x3e|commands| Pipeline\n    API[Python API] --\x3e|calls| Pipeline\n    Pipeline --\x3e|uses| Models\n    Pipeline --\x3e|manages| Agents\n    Pipeline --\x3e|invokes| RAG\n    Pipeline --\x3e|logs to| Logging\n    Pipeline --\x3e|integrates| Tools\n    Models --\x3e|wrappers| ModelWrappers\n    Agents --\x3e|memory/tools| AgentSystem\n    RAG --\x3e|vector store| VectorStore\n    Logging --\x3e|usage| UsageTracker\n    Logging --\x3e|trace| TraceLogger\n"})}),"\n",(0,r.jsx)(n.p,{children:"This modular design allows for easy extension and integration with external tools and workflows."})]})}function g(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var i=t(6540);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);