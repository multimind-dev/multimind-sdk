"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[459],{4753:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"contributing","title":"Contributing","description":"Thank you for your interest in contributing to MultiMind SDK!","source":"@site/docs/contributing.md","sourceDirName":".","slug":"/contributing","permalink":"/docs/contributing","draft":false,"unlisted":false,"editUrl":"https://github.com/multimind-dev/multimind-sdk/edit/develop/docs/contributing.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Integration Guide","permalink":"/docs/integration-guide"}}');var r=i(4848),o=i(8453);const s={},d="Contributing",c={},l=[{value:"How to Contribute",id:"how-to-contribute",level:2},{value:"Code Review",id:"code-review",level:2}];function u(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"contributing",children:"Contributing"})}),"\n",(0,r.jsx)(e.p,{children:"Thank you for your interest in contributing to MultiMind SDK!"}),"\n",(0,r.jsx)(e.h2,{id:"how-to-contribute",children:"How to Contribute"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Fork the repository"})," on GitHub."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Clone your fork"})," locally:","\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"git clone https://github.com/your-username/multimind-sdk.git\ncd multimind-sdk\n"})}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Install dependencies"}),":","\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:'pip install -e ".[dev]"\n'})}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Set up pre-commit hooks"}),":","\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"pre-commit install\n"})}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Create a new branch"})," for your feature or fix:","\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"git checkout -b my-feature\n"})}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Follow coding standards"}),":","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Use ",(0,r.jsx)(e.a,{href:"https://www.python.org/dev/peps/pep-0008/",children:"PEP8"})," style."]}),"\n",(0,r.jsx)(e.li,{children:"Write clear docstrings and comments."}),"\n",(0,r.jsx)(e.li,{children:"Add or update tests for your changes."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Commit and push"})," your changes:","\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:'git add .\ngit commit -m "Describe your change"\ngit push origin my-feature\n'})}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Open a pull request"})," on GitHub and describe your changes."]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"code-review",children:"Code Review"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"All contributions are reviewed by maintainers."}),"\n",(0,r.jsx)(e.li,{children:"Please respond to feedback and update your PR as needed."}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:"Thank you for helping improve MultiMind SDK!"})]})}function h(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(u,{...n})}):u(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>s,x:()=>d});var t=i(6540);const r={},o=t.createContext(r);function s(n){const e=t.useContext(o);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function d(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:s(n.components),t.createElement(o.Provider,{value:e},n.children)}}}]);